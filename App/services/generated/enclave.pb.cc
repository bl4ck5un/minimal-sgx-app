// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enclave.proto

#include "enclave.pb.h"

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rpc
{
class AttestationDefaultTypeInternal
{
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attestation>
      _instance;
} _Attestation_default_instance_;
class StatusDefaultTypeInternal
{
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class RequestDefaultTypeInternal
{
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ResponseDefaultTypeInternal
{
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class EmptyDefaultTypeInternal
{
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
}  // namespace rpc
static void InitDefaultsscc_info_Attestation_enclave_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc::_Attestation_default_instance_;
    new (ptr)::rpc::Attestation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::Attestation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Attestation_enclave_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0,
         0,
         InitDefaultsscc_info_Attestation_enclave_2eproto},
        {}};

static void InitDefaultsscc_info_Empty_enclave_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc::_Empty_default_instance_;
    new (ptr)::rpc::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_enclave_2eproto = {
    {ATOMIC_VAR_INIT(
         ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     0,
     0,
     InitDefaultsscc_info_Empty_enclave_2eproto},
    {}};

static void InitDefaultsscc_info_Request_enclave_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc::_Request_default_instance_;
    new (ptr)::rpc::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_enclave_2eproto =
    {{ATOMIC_VAR_INIT(
          ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
      0,
      0,
      InitDefaultsscc_info_Request_enclave_2eproto},
     {}};

static void InitDefaultsscc_info_Response_enclave_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc::_Response_default_instance_;
    new (ptr)::rpc::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Response_enclave_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0,
         0,
         InitDefaultsscc_info_Response_enclave_2eproto},
        {}};

static void InitDefaultsscc_info_Status_enclave_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpc::_Status_default_instance_;
    new (ptr)::rpc::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpc::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_enclave_2eproto =
    {{ATOMIC_VAR_INIT(
          ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
      0,
      0,
      InitDefaultsscc_info_Status_enclave_2eproto},
     {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_enclave_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const**
    file_level_enum_descriptors_enclave_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_enclave_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_enclave_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rpc::Attestation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::rpc::Attestation, quote_),
        PROTOBUF_FIELD_OFFSET(::rpc::Attestation, mr_enclave_),
        PROTOBUF_FIELD_OFFSET(::rpc::Attestation, error_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rpc::Status, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::rpc::Status, version_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rpc::Request, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::rpc::Request, id_),
        PROTOBUF_FIELD_OFFSET(::rpc::Request, type_),
        PROTOBUF_FIELD_OFFSET(::rpc::Request, data_),
        PROTOBUF_FIELD_OFFSET(::rpc::Request, nonce_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rpc::Response, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::rpc::Response, error_code_),
        PROTOBUF_FIELD_OFFSET(::rpc::Response, response_tx_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rpc::Empty, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::rpc::Attestation)},
        {8, -1, sizeof(::rpc::Status)},
        {14, -1, sizeof(::rpc::Request)},
        {23, -1, sizeof(::rpc::Response)},
        {30, -1, sizeof(::rpc::Empty)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::rpc::_Attestation_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::rpc::_Status_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::rpc::_Request_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::rpc::_Response_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::rpc::_Empty_default_instance_),
};

const char
    descriptor_table_protodef_enclave_2eproto[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) =
        "\n\renclave.proto\022\003rpc\"\?\n\013Attestation\022\r\n\005q"
        "uote\030\001 \001(\t\022\022\n\nmr_enclave\030\002 "
        "\001(\t\022\r\n\005error\030"
        "\003 \001(\t\"\031\n\006Status\022\017\n\007version\030\001 "
        "\001(\t\"@\n\007Requ"
        "est\022\n\n\002id\030\001 \001(\004\022\014\n\004type\030\002 "
        "\001(\r\022\014\n\004data\030\003 "
        "\001(\014\022\r\n\005nonce\030\004 "
        "\001(\004\"3\n\010Response\022\022\n\nerror_"
        "code\030\001 \001(\r\022\023\n\013response_tx\030\002 "
        "\001(\014\"\007\n\005Empty"
        "2\202\001\n\007enclave\022(\n\006attest\022\n.rpc.Empty\032\020.rpc"
        ".Attestation\"\000\022#\n\006status\022\n.rpc.Empty\032\013.r"
        "pc.Status\"\000\022(\n\007process\022\014.rpc.Request\032\r.r"
        "pc.Response\"\000b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_enclave_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_enclave_2eproto_sccs[5] = {
        &scc_info_Attestation_enclave_2eproto.base,
        &scc_info_Empty_enclave_2eproto.base,
        &scc_info_Request_enclave_2eproto.base,
        &scc_info_Response_enclave_2eproto.base,
        &scc_info_Status_enclave_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_enclave_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_enclave_2eproto = {
        false,
        false,
        descriptor_table_protodef_enclave_2eproto,
        "enclave.proto",
        381,
        &descriptor_table_enclave_2eproto_once,
        descriptor_table_enclave_2eproto_sccs,
        descriptor_table_enclave_2eproto_deps,
        5,
        0,
        schemas,
        file_default_instances,
        TableStruct_enclave_2eproto::offsets,
        file_level_metadata_enclave_2eproto,
        5,
        file_level_enum_descriptors_enclave_2eproto,
        file_level_service_descriptors_enclave_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_enclave_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_enclave_2eproto)),
     true);
namespace rpc
{
// ===================================================================

void Attestation::InitAsDefaultInstance() {}
class Attestation::_Internal
{
 public:
};

Attestation::Attestation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpc.Attestation)
}
Attestation::Attestation(const Attestation& from)
    : ::PROTOBUF_NAMESPACE_ID::Message()
{
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  quote_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quote().empty()) {
    quote_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_quote(),
        GetArena());
  }
  mr_enclave_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mr_enclave().empty()) {
    mr_enclave_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_mr_enclave(),
        GetArena());
  }
  error_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_error(),
        GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rpc.Attestation)
}

void Attestation::SharedCtor()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Attestation_enclave_2eproto.base);
  quote_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_enclave_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Attestation::~Attestation()
{
  // @@protoc_insertion_point(destructor:rpc.Attestation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attestation::SharedDtor()
{
  GOOGLE_DCHECK(GetArena() == nullptr);
  quote_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mr_enclave_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Attestation::ArenaDtor(void* object)
{
  Attestation* _this = reinterpret_cast<Attestation*>(object);
  (void)_this;
}
void Attestation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void Attestation::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Attestation& Attestation::default_instance()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Attestation_enclave_2eproto.base);
  return *internal_default_instance();
}

void Attestation::Clear()
{
  // @@protoc_insertion_point(message_clear_start:rpc.Attestation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  quote_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  mr_enclave_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  error_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attestation::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string quote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_quote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "rpc.Attestation.quote"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mr_enclave = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mr_enclave();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "rpc.Attestation.mr_enclave"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "rpc.Attestation.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr,
                                ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attestation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Attestation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_quote().data(),
        static_cast<int>(this->_internal_quote().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.Attestation.quote");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_quote(), target);
  }

  // string mr_enclave = 2;
  if (this->mr_enclave().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_mr_enclave().data(),
        static_cast<int>(this->_internal_mr_enclave().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.Attestation.mr_enclave");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mr_enclave(), target);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_error().data(),
        static_cast<int>(this->_internal_error().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.Attestation.error");
    target =
        stream->WriteStringMaybeAliased(3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Attestation)
  return target;
}

size_t Attestation::ByteSizeLong() const
{
  // @@protoc_insertion_point(message_byte_size_start:rpc.Attestation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_quote());
  }

  // string mr_enclave = 2;
  if (this->mr_enclave().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_mr_enclave());
  }

  // string error = 3;
  if (this->error().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attestation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_merge_from_start:rpc.Attestation)
  GOOGLE_DCHECK_NE(&from, this);
  const Attestation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attestation>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Attestation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Attestation)
    MergeFrom(*source);
  }
}

void Attestation::MergeFrom(const Attestation& from)
{
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.Attestation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.quote().size() > 0) {
    _internal_set_quote(from._internal_quote());
  }
  if (from.mr_enclave().size() > 0) {
    _internal_set_mr_enclave(from._internal_mr_enclave());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
}

void Attestation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_copy_from_start:rpc.Attestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attestation::CopyFrom(const Attestation& from)
{
  // @@protoc_insertion_point(class_specific_copy_from_start:rpc.Attestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attestation::IsInitialized() const { return true; }

void Attestation::InternalSwap(Attestation* other)
{
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  quote_.Swap(&other->quote_,
              &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              GetArena());
  mr_enclave_.Swap(
      &other->mr_enclave_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  error_.Swap(&other->error_,
              &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Attestation::GetMetadata() const
{
  return GetMetadataStatic();
}

// ===================================================================

void Status::InitAsDefaultInstance() {}
class Status::_Internal
{
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpc.Status)
}
Status::Status(const Status& from) : ::PROTOBUF_NAMESPACE_ID::Message()
{
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  version_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_version(),
        GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rpc.Status)
}

void Status::SharedCtor()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Status_enclave_2eproto.base);
  version_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Status::~Status()
{
  // @@protoc_insertion_point(destructor:rpc.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor()
{
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object)
{
  Status* _this = reinterpret_cast<Status*>(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void Status::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Status& Status::default_instance()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Status_enclave_2eproto.base);
  return *internal_default_instance();
}

void Status::Clear()
{
  // @@protoc_insertion_point(message_clear_start:rpc.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  version_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "rpc.Status.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr,
                                ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_version().data(),
        static_cast<int>(this->_internal_version().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.Status.version");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Status)
  return target;
}

size_t Status::ByteSizeLong() const
{
  // @@protoc_insertion_point(message_byte_size_start:rpc.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_merge_from_start:rpc.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from)
{
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_copy_from_start:rpc.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from)
{
  // @@protoc_insertion_point(class_specific_copy_from_start:rpc.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const { return true; }

void Status::InternalSwap(Status* other)
{
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  version_.Swap(
      &other->version_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const
{
  return GetMetadataStatic();
}

// ===================================================================

void Request::InitAsDefaultInstance() {}
class Request::_Internal
{
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpc.Request)
}
Request::Request(const Request& from) : ::PROTOBUF_NAMESPACE_ID::Message()
{
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  data_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              from._internal_data(),
              GetArena());
  }
  ::memcpy(&id_,
           &from.id_,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&id_)) +
               sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:rpc.Request)
}

void Request::SharedCtor()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Request_enclave_2eproto.base);
  data_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_,
           0,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&id_)) +
               sizeof(type_));
}

Request::~Request()
{
  // @@protoc_insertion_point(destructor:rpc.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor()
{
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::ArenaDtor(void* object)
{
  Request* _this = reinterpret_cast<Request*>(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void Request::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Request& Request::default_instance()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Request_enclave_2eproto.base);
  return *internal_default_instance();
}

void Request::Clear()
{
  // @@protoc_insertion_point(message_clear_start:rpc.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  data_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::memset(&id_,
           0,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&id_)) +
               sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr,
                                ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_type(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(3, this->_internal_data(), target);
  }

  // uint64 nonce = 4;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            4, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Request)
  return target;
}

size_t Request::ByteSizeLong() const
{
  // @@protoc_insertion_point(message_byte_size_start:rpc.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                this->_internal_data());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_id());
  }

  // uint64 nonce = 4;
  if (this->nonce() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_nonce());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_merge_from_start:rpc.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from)
{
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_copy_from_start:rpc.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from)
{
  // @@protoc_insertion_point(class_specific_copy_from_start:rpc.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const { return true; }

void Request::InternalSwap(Request* other)
{
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  data_.Swap(&other->data_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, type_) + sizeof(Request::type_) -
      PROTOBUF_FIELD_OFFSET(Request, id_)>(
      reinterpret_cast<char*>(&id_), reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const
{
  return GetMetadataStatic();
}

// ===================================================================

void Response::InitAsDefaultInstance() {}
class Response::_Internal
{
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpc.Response)
}
Response::Response(const Response& from) : ::PROTOBUF_NAMESPACE_ID::Message()
{
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  response_tx_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_tx().empty()) {
    response_tx_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_response_tx(),
        GetArena());
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:rpc.Response)
}

void Response::SharedCtor()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Response_enclave_2eproto.base);
  response_tx_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0u;
}

Response::~Response()
{
  // @@protoc_insertion_point(destructor:rpc.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor()
{
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_tx_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::ArenaDtor(void* object)
{
  Response* _this = reinterpret_cast<Response*>(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void Response::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Response& Response::default_instance()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Response_enclave_2eproto.base);
  return *internal_default_instance();
}

void Response::Clear()
{
  // @@protoc_insertion_point(message_clear_start:rpc.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  response_tx_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  error_code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes response_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_response_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr,
                                ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            1, this->_internal_error_code(), target);
  }

  // bytes response_tx = 2;
  if (this->response_tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_response_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Response)
  return target;
}

size_t Response::ByteSizeLong() const
{
  // @@protoc_insertion_point(message_byte_size_start:rpc.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // bytes response_tx = 2;
  if (this->response_tx().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                this->_internal_response_tx());
  }

  // uint32 error_code = 1;
  if (this->error_code() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_merge_from_start:rpc.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from)
{
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.response_tx().size() > 0) {
    _internal_set_response_tx(from._internal_response_tx());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_copy_from_start:rpc.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from)
{
  // @@protoc_insertion_point(class_specific_copy_from_start:rpc.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const { return true; }

void Response::InternalSwap(Response* other)
{
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  response_tx_.Swap(
      &other->response_tx_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const
{
  return GetMetadataStatic();
}

// ===================================================================

void Empty::InitAsDefaultInstance() {}
class Empty::_Internal
{
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpc.Empty)
}
Empty::Empty(const Empty& from) : ::PROTOBUF_NAMESPACE_ID::Message()
{
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.Empty)
}

void Empty::SharedCtor() {}

Empty::~Empty()
{
  // @@protoc_insertion_point(destructor:rpc.Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Empty::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void Empty::ArenaDtor(void* object)
{
  Empty* _this = reinterpret_cast<Empty*>(object);
  (void)_this;
}
void Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void Empty::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Empty& Empty::default_instance()
{
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Empty_enclave_2eproto.base);
  return *internal_default_instance();
}

void Empty::Clear()
{
  // @@protoc_insertion_point(message_clear_start:rpc.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Empty::_InternalParse(
    const char* ptr,
    ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr,
        ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const
{
  // @@protoc_insertion_point(message_byte_size_start:rpc.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_merge_from_start:rpc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from)
{
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
  // @@protoc_insertion_point(generalized_copy_from_start:rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from)
{
  // @@protoc_insertion_point(class_specific_copy_from_start:rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const { return true; }

void Empty::InternalSwap(Empty* other)
{
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const
{
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::rpc::Attestation*
Arena::CreateMaybeMessage<::rpc::Attestation>(Arena* arena)
{
  return Arena::CreateMessageInternal<::rpc::Attestation>(arena);
}
template <>
PROTOBUF_NOINLINE ::rpc::Status* Arena::CreateMaybeMessage<::rpc::Status>(
    Arena* arena)
{
  return Arena::CreateMessageInternal<::rpc::Status>(arena);
}
template <>
PROTOBUF_NOINLINE ::rpc::Request* Arena::CreateMaybeMessage<::rpc::Request>(
    Arena* arena)
{
  return Arena::CreateMessageInternal<::rpc::Request>(arena);
}
template <>
PROTOBUF_NOINLINE ::rpc::Response* Arena::CreateMaybeMessage<::rpc::Response>(
    Arena* arena)
{
  return Arena::CreateMessageInternal<::rpc::Response>(arena);
}
template <>
PROTOBUF_NOINLINE ::rpc::Empty* Arena::CreateMaybeMessage<::rpc::Empty>(
    Arena* arena)
{
  return Arena::CreateMessageInternal<::rpc::Empty>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
