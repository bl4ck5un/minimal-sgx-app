// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enclave.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_enclave_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_enclave_2eproto

#include <google/protobuf/port_def.inc>
#include <limits>
#include <string>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>

#include <google/protobuf/port_undef.inc>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enclave_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_enclave_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
      schema[5] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
      field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_enclave_2eproto;
namespace rpc
{
class Attestation;
class AttestationDefaultTypeInternal;
extern AttestationDefaultTypeInternal _Attestation_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template <>
::rpc::Attestation* Arena::CreateMaybeMessage<::rpc::Attestation>(Arena*);
template <>
::rpc::Empty* Arena::CreateMaybeMessage<::rpc::Empty>(Arena*);
template <>
::rpc::Request* Arena::CreateMaybeMessage<::rpc::Request>(Arena*);
template <>
::rpc::Response* Arena::CreateMaybeMessage<::rpc::Response>(Arena*);
template <>
::rpc::Status* Arena::CreateMaybeMessage<::rpc::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpc
{
// ===================================================================

class Attestation PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rpc.Attestation)
                   */
{
 public:
  inline Attestation() : Attestation(nullptr){};
  virtual ~Attestation();

  Attestation(const Attestation& from);
  Attestation(Attestation&& from) noexcept : Attestation()
  {
    *this = ::std::move(from);
  }

  inline Attestation& operator=(const Attestation& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline Attestation& operator=(Attestation&& from) noexcept
  {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return GetMetadataStatic().reflection;
  }
  static const Attestation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attestation* internal_default_instance()
  {
    return reinterpret_cast<const Attestation*>(
        &_Attestation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(Attestation& a, Attestation& b) { a.Swap(&b); }
  inline void Swap(Attestation* other)
  {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attestation* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attestation* New() const final
  {
    return CreateMaybeMessage<Attestation>(nullptr);
  }

  Attestation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<Attestation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attestation& from);
  void MergeFrom(const Attestation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attestation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
  {
    return "rpc.Attestation";
  }

 protected:
  explicit Attestation(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteFieldNumber = 1,
    kMrEnclaveFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string quote = 1;
  void clear_quote();
  const std::string& quote() const;
  void set_quote(const std::string& value);
  void set_quote(std::string&& value);
  void set_quote(const char* value);
  void set_quote(const char* value, size_t size);
  std::string* mutable_quote();
  std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string* unsafe_arena_release_quote();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_quote(std::string* quote);

 private:
  const std::string& _internal_quote() const;
  void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();

 public:
  // string mr_enclave = 2;
  void clear_mr_enclave();
  const std::string& mr_enclave() const;
  void set_mr_enclave(const std::string& value);
  void set_mr_enclave(std::string&& value);
  void set_mr_enclave(const char* value);
  void set_mr_enclave(const char* value, size_t size);
  std::string* mutable_mr_enclave();
  std::string* release_mr_enclave();
  void set_allocated_mr_enclave(std::string* mr_enclave);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string* unsafe_arena_release_mr_enclave();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_mr_enclave(std::string* mr_enclave);

 private:
  const std::string& _internal_mr_enclave() const;
  void _internal_set_mr_enclave(const std::string& value);
  std::string* _internal_mutable_mr_enclave();

 public:
  // string error = 3;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_error(std::string* error);

 private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();

 public:
  // @@protoc_insertion_point(class_scope:rpc.Attestation)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mr_enclave_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rpc.Status)
                   */
{
 public:
  inline Status() : Status(nullptr){};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept : Status() { *this = ::std::move(from); }

  inline Status& operator=(const Status& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept
  {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance()
  {
    return reinterpret_cast<const Status*>(&_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(Status& a, Status& b) { a.Swap(&b); }
  inline void Swap(Status* other)
  {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final
  {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
  {
    return "rpc.Status";
  }

 protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_version(std::string* version);

 private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();

 public:
  // @@protoc_insertion_point(class_scope:rpc.Status)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rpc.Request)
                   */
{
 public:
  inline Request() : Request(nullptr){};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept : Request() { *this = ::std::move(from); }

  inline Request& operator=(const Request& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept
  {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance()
  {
    return reinterpret_cast<const Request*>(&_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(Request& a, Request& b) { a.Swap(&b); }
  inline void Swap(Request* other)
  {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final
  {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
  {
    return "rpc.Request";
  }

 protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kIdFieldNumber = 1,
    kNonceFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_data(std::string* data);

 private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();

 public:
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // uint64 nonce = 4;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:rpc.Request)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rpc.Response)
                   */
{
 public:
  inline Response() : Response(nullptr){};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept : Response() { *this = ::std::move(from); }

  inline Response& operator=(const Response& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept
  {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance()
  {
    return reinterpret_cast<const Response*>(&_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(Response& a, Response& b) { a.Swap(&b); }
  inline void Swap(Response* other)
  {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final
  {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
  {
    return "rpc.Response";
  }

 protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseTxFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // bytes response_tx = 2;
  void clear_response_tx();
  const std::string& response_tx() const;
  void set_response_tx(const std::string& value);
  void set_response_tx(std::string&& value);
  void set_response_tx(const char* value);
  void set_response_tx(const void* value, size_t size);
  std::string* mutable_response_tx();
  std::string* release_response_tx();
  void set_allocated_response_tx(std::string* response_tx);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string* unsafe_arena_release_response_tx();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_response_tx(std::string* response_tx);

 private:
  const std::string& _internal_response_tx() const;
  void _internal_set_response_tx(const std::string& value);
  std::string* _internal_mutable_response_tx();

 public:
  // uint32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:rpc.Response)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_tx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rpc.Empty)
                   */
{
 public:
  inline Empty() : Empty(nullptr){};
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept : Empty() { *this = ::std::move(from); }

  inline Empty& operator=(const Empty& from)
  {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept
  {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
  {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
  {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
  {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance()
  {
    return reinterpret_cast<const Empty*>(&_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;

  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other)
  {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other)
  {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final { return CreateMaybeMessage<Empty>(nullptr); }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
  {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
  {
    return "rpc.Empty";
  }

 protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.Empty)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Attestation

// string quote = 1;
inline void Attestation::clear_quote()
{
  quote_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline const std::string& Attestation::quote() const
{
  // @@protoc_insertion_point(field_get:rpc.Attestation.quote)
  return _internal_quote();
}
inline void Attestation::set_quote(const std::string& value)
{
  _internal_set_quote(value);
  // @@protoc_insertion_point(field_set:rpc.Attestation.quote)
}
inline std::string* Attestation::mutable_quote()
{
  // @@protoc_insertion_point(field_mutable:rpc.Attestation.quote)
  return _internal_mutable_quote();
}
inline const std::string& Attestation::_internal_quote() const
{
  return quote_.Get();
}
inline void Attestation::_internal_set_quote(const std::string& value)
{
  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             value,
             GetArena());
}
inline void Attestation::set_quote(std::string&& value)
{
  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::move(value),
             GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Attestation.quote)
}
inline void Attestation::set_quote(const char* value)
{
  GOOGLE_DCHECK(value != nullptr);

  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(value),
             GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Attestation.quote)
}
inline void Attestation::set_quote(const char* value, size_t size)
{
  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(reinterpret_cast<const char*>(value), size),
             GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Attestation.quote)
}
inline std::string* Attestation::_internal_mutable_quote()
{
  return quote_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string* Attestation::release_quote()
{
  // @@protoc_insertion_point(field_release:rpc.Attestation.quote)
  return quote_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::set_allocated_quote(std::string* quote)
{
  if (quote != nullptr) {
  } else {
  }
  quote_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      quote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Attestation.quote)
}
inline std::string* Attestation::unsafe_arena_release_quote()
{
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Attestation.quote)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return quote_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::unsafe_arena_set_allocated_quote(std::string* quote)
{
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (quote != nullptr) {
  } else {
  }
  quote_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      quote,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Attestation.quote)
}

// string mr_enclave = 2;
inline void Attestation::clear_mr_enclave()
{
  mr_enclave_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline const std::string& Attestation::mr_enclave() const
{
  // @@protoc_insertion_point(field_get:rpc.Attestation.mr_enclave)
  return _internal_mr_enclave();
}
inline void Attestation::set_mr_enclave(const std::string& value)
{
  _internal_set_mr_enclave(value);
  // @@protoc_insertion_point(field_set:rpc.Attestation.mr_enclave)
}
inline std::string* Attestation::mutable_mr_enclave()
{
  // @@protoc_insertion_point(field_mutable:rpc.Attestation.mr_enclave)
  return _internal_mutable_mr_enclave();
}
inline const std::string& Attestation::_internal_mr_enclave() const
{
  return mr_enclave_.Get();
}
inline void Attestation::_internal_set_mr_enclave(const std::string& value)
{
  mr_enclave_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value,
      GetArena());
}
inline void Attestation::set_mr_enclave(std::string&& value)
{
  mr_enclave_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Attestation.mr_enclave)
}
inline void Attestation::set_mr_enclave(const char* value)
{
  GOOGLE_DCHECK(value != nullptr);

  mr_enclave_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Attestation.mr_enclave)
}
inline void Attestation::set_mr_enclave(const char* value, size_t size)
{
  mr_enclave_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Attestation.mr_enclave)
}
inline std::string* Attestation::_internal_mutable_mr_enclave()
{
  return mr_enclave_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string* Attestation::release_mr_enclave()
{
  // @@protoc_insertion_point(field_release:rpc.Attestation.mr_enclave)
  return mr_enclave_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::set_allocated_mr_enclave(std::string* mr_enclave)
{
  if (mr_enclave != nullptr) {
  } else {
  }
  mr_enclave_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mr_enclave,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Attestation.mr_enclave)
}
inline std::string* Attestation::unsafe_arena_release_mr_enclave()
{
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Attestation.mr_enclave)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return mr_enclave_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::unsafe_arena_set_allocated_mr_enclave(
    std::string* mr_enclave)
{
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mr_enclave != nullptr) {
  } else {
  }
  mr_enclave_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mr_enclave,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Attestation.mr_enclave)
}

// string error = 3;
inline void Attestation::clear_error()
{
  error_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline const std::string& Attestation::error() const
{
  // @@protoc_insertion_point(field_get:rpc.Attestation.error)
  return _internal_error();
}
inline void Attestation::set_error(const std::string& value)
{
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:rpc.Attestation.error)
}
inline std::string* Attestation::mutable_error()
{
  // @@protoc_insertion_point(field_mutable:rpc.Attestation.error)
  return _internal_mutable_error();
}
inline const std::string& Attestation::_internal_error() const
{
  return error_.Get();
}
inline void Attestation::_internal_set_error(const std::string& value)
{
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             value,
             GetArena());
}
inline void Attestation::set_error(std::string&& value)
{
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::move(value),
             GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Attestation.error)
}
inline void Attestation::set_error(const char* value)
{
  GOOGLE_DCHECK(value != nullptr);

  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(value),
             GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Attestation.error)
}
inline void Attestation::set_error(const char* value, size_t size)
{
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(reinterpret_cast<const char*>(value), size),
             GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Attestation.error)
}
inline std::string* Attestation::_internal_mutable_error()
{
  return error_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string* Attestation::release_error()
{
  // @@protoc_insertion_point(field_release:rpc.Attestation.error)
  return error_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::set_allocated_error(std::string* error)
{
  if (error != nullptr) {
  } else {
  }
  error_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Attestation.error)
}
inline std::string* Attestation::unsafe_arena_release_error()
{
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Attestation.error)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return error_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::unsafe_arena_set_allocated_error(std::string* error)
{
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
  } else {
  }
  error_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Attestation.error)
}

// -------------------------------------------------------------------

// Status

// string version = 1;
inline void Status::clear_version()
{
  version_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline const std::string& Status::version() const
{
  // @@protoc_insertion_point(field_get:rpc.Status.version)
  return _internal_version();
}
inline void Status::set_version(const std::string& value)
{
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:rpc.Status.version)
}
inline std::string* Status::mutable_version()
{
  // @@protoc_insertion_point(field_mutable:rpc.Status.version)
  return _internal_mutable_version();
}
inline const std::string& Status::_internal_version() const
{
  return version_.Get();
}
inline void Status::_internal_set_version(const std::string& value)
{
  version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value,
      GetArena());
}
inline void Status::set_version(std::string&& value)
{
  version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Status.version)
}
inline void Status::set_version(const char* value)
{
  GOOGLE_DCHECK(value != nullptr);

  version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Status.version)
}
inline void Status::set_version(const char* value, size_t size)
{
  version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Status.version)
}
inline std::string* Status::_internal_mutable_version()
{
  return version_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string* Status::release_version()
{
  // @@protoc_insertion_point(field_release:rpc.Status.version)
  return version_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Status::set_allocated_version(std::string* version)
{
  if (version != nullptr) {
  } else {
  }
  version_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Status.version)
}
inline std::string* Status::unsafe_arena_release_version()
{
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Status.version)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return version_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Status::unsafe_arena_set_allocated_version(std::string* version)
{
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
  } else {
  }
  version_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Status.version)
}

// -------------------------------------------------------------------

// Request

// uint64 id = 1;
inline void Request::clear_id() { id_ = PROTOBUF_ULONGLONG(0); }
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_id() const
{
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::id() const
{
  // @@protoc_insertion_point(field_get:rpc.Request.id)
  return _internal_id();
}
inline void Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value)
{
  id_ = value;
}
inline void Request::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value)
{
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rpc.Request.id)
}

// uint32 type = 2;
inline void Request::clear_type() { type_ = 0u; }
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::_internal_type() const
{
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request::type() const
{
  // @@protoc_insertion_point(field_get:rpc.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value)
{
  type_ = value;
}
inline void Request::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value)
{
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rpc.Request.type)
}

// bytes data = 3;
inline void Request::clear_data()
{
  data_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline const std::string& Request::data() const
{
  // @@protoc_insertion_point(field_get:rpc.Request.data)
  return _internal_data();
}
inline void Request::set_data(const std::string& value)
{
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:rpc.Request.data)
}
inline std::string* Request::mutable_data()
{
  // @@protoc_insertion_point(field_mutable:rpc.Request.data)
  return _internal_mutable_data();
}
inline const std::string& Request::_internal_data() const
{
  return data_.Get();
}
inline void Request::_internal_set_data(const std::string& value)
{
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            value,
            GetArena());
}
inline void Request::set_data(std::string&& value)
{
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::move(value),
            GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Request.data)
}
inline void Request::set_data(const char* value)
{
  GOOGLE_DCHECK(value != nullptr);

  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::string(value),
            GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Request.data)
}
inline void Request::set_data(const void* value, size_t size)
{
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size),
            GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Request.data)
}
inline std::string* Request::_internal_mutable_data()
{
  return data_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string* Request::release_data()
{
  // @@protoc_insertion_point(field_release:rpc.Request.data)
  return data_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::set_allocated_data(std::string* data)
{
  if (data != nullptr) {
  } else {
  }
  data_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Request.data)
}
inline std::string* Request::unsafe_arena_release_data()
{
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Request.data)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return data_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_data(std::string* data)
{
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
  } else {
  }
  data_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Request.data)
}

// uint64 nonce = 4;
inline void Request::clear_nonce() { nonce_ = PROTOBUF_ULONGLONG(0); }
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_nonce() const
{
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::nonce() const
{
  // @@protoc_insertion_point(field_get:rpc.Request.nonce)
  return _internal_nonce();
}
inline void Request::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value)
{
  nonce_ = value;
}
inline void Request::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value)
{
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:rpc.Request.nonce)
}

// -------------------------------------------------------------------

// Response

// uint32 error_code = 1;
inline void Response::clear_error_code() { error_code_ = 0u; }
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::_internal_error_code() const
{
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::error_code() const
{
  // @@protoc_insertion_point(field_get:rpc.Response.error_code)
  return _internal_error_code();
}
inline void Response::_internal_set_error_code(
    ::PROTOBUF_NAMESPACE_ID::uint32 value)
{
  error_code_ = value;
}
inline void Response::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value)
{
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:rpc.Response.error_code)
}

// bytes response_tx = 2;
inline void Response::clear_response_tx()
{
  response_tx_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline const std::string& Response::response_tx() const
{
  // @@protoc_insertion_point(field_get:rpc.Response.response_tx)
  return _internal_response_tx();
}
inline void Response::set_response_tx(const std::string& value)
{
  _internal_set_response_tx(value);
  // @@protoc_insertion_point(field_set:rpc.Response.response_tx)
}
inline std::string* Response::mutable_response_tx()
{
  // @@protoc_insertion_point(field_mutable:rpc.Response.response_tx)
  return _internal_mutable_response_tx();
}
inline const std::string& Response::_internal_response_tx() const
{
  return response_tx_.Get();
}
inline void Response::_internal_set_response_tx(const std::string& value)
{
  response_tx_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value,
      GetArena());
}
inline void Response::set_response_tx(std::string&& value)
{
  response_tx_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Response.response_tx)
}
inline void Response::set_response_tx(const char* value)
{
  GOOGLE_DCHECK(value != nullptr);

  response_tx_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Response.response_tx)
}
inline void Response::set_response_tx(const void* value, size_t size)
{
  response_tx_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Response.response_tx)
}
inline std::string* Response::_internal_mutable_response_tx()
{
  return response_tx_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string* Response::release_response_tx()
{
  // @@protoc_insertion_point(field_release:rpc.Response.response_tx)
  return response_tx_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::set_allocated_response_tx(std::string* response_tx)
{
  if (response_tx != nullptr) {
  } else {
  }
  response_tx_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response_tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Response.response_tx)
}
inline std::string* Response::unsafe_arena_release_response_tx()
{
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Response.response_tx)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return response_tx_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_response_tx(
    std::string* response_tx)
{
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response_tx != nullptr) {
  } else {
  }
  response_tx_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response_tx,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Response.response_tx)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_enclave_2eproto
